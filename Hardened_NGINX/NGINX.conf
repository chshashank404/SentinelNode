worker_processes 1;

events {
    worker_connections 1024;
}

http {
    # Disable access logs for privacy and performance (can be enabled for debugging)
    access_log off;

    # Resolver settings to handle DNS resolution within Docker
    resolver 127.0.0.11 ipv6=off valid=10s;
    resolver_timeout 5s;

    # Security headers to prevent clickjacking, XSS, and content sniffing
    add_header X-Content-Type-Options "nosniff";
    add_header X-Frame-Options "DENY";
    add_header X-XSS-Protection "1; mode=block";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'none';";

    # Block requests with large bodies to prevent resource exhaustion
    client_max_body_size 0;

    # Enable CORS for private network requests
    map $request_method$http_access_control_request_private_network $cors_allow_private_network {
        "OPTIONStrue" "true";
        default "";
    }
    add_header Access-Control-Allow-Private-Network $cors_allow_private_network;

    # Define zones for rate limiting and connection limiting
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=5r/s;
    limit_conn_zone $binary_remote_addr zone=conn_limit:10m;

    # Optional IP whitelisting (add IPs as necessary and uncomment the allow and deny lines)
    # server {
    #     allow 192.168.1.100;  # Example trusted IP
    #     deny all;
    # }

    server {
        listen 4001;

        location / {
            # Apply rate limiting and connection limiting for this location
            limit_req zone=api_limit burst=10 nodelay;
            limit_conn conn_limit 20;

            # Proxy settings for Algorand node
            proxy_http_version 1.1;
            proxy_read_timeout 120s;
            proxy_set_header Host $host;
            proxy_set_header Connection "";
            proxy_pass_header Server;
            set $target http://algod:8080;
            proxy_pass $target;
        }
    }

    server {
        listen 4002;

        location / {
            limit_req zone=api_limit burst=10 nodelay;
            limit_conn conn_limit 20;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header Connection "";
            proxy_pass_header Server;
            set $target http://algod:7833;
            proxy_pass $target;
        }
    }

    server {
        listen 8980;

        location / {
            limit_req zone=api_limit burst=10 nodelay;
            limit_conn conn_limit 20;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header Connection "";
            proxy_pass_header Server;
            set $target http://indexer:8980;
            proxy_pass $target;
        }
    }
}